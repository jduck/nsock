#
# don't understand?  http://www.gnu.org/manual/autoconf/
# by: Joshua J. Drake <libnsock@qoop.org>
#
# modifications:
#
# 05/23/2004 - added checks for SSL and libsocket/libnsl
# 
# 09/07/2001 - intial creation, checking for version number, cc, and
#  	       non-blocking

AC_INIT(.version)
AC_CONFIG_HEADER(defs.h)

# grok the version number from .version
#
VERSION=`cat .version`
MAJORVER=`echo $VERSION | cut -d\. -f1`

AC_REVISION($Revision: $VERSION $)

echo "*** configuring libnsock v$VERSION"
echo

AC_SUBST(VERSION)
AC_SUBST(MAJORVER)


# check for debugging setting
#
CFLAGS="-Wall"
LDFLAGS=""
if test "x""$DEBUG" != "x"; then
   CFLAGS="$CFLAGS -ggdb"
else
   CFLAGS="$CFLAGS -O2"
   LDFLAGS="-s"
fi
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)


# check out compiler
#
AC_PROG_CC
AC_PROG_CC_C_O
AC_PROG_CPP
AC_CACHE_SAVE


# check for the socket library
#
libsocket="no"
AC_CHECK_FUNC(socket, libsocket="yes", AC_CHECK_LIB(socket, socket, libsocket="yes"; LIBS="$LIBS -lsocket"))
if test x"$libsocket" = x"no"; then
  AC_MSG_WARN([cannot find socket(2) call, aborting])
fi


# check for ipv6
#
AC_MSG_CHECKING([for INET6])
AC_TRY_RUN([ /* AF_INET6 available check */
#include <sys/types.h>
#include <sys/socket.h>
int
main()
{
 if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
    return 1;
 else
    return 0;
}],
   AC_MSG_RESULT(yes)	    
   AC_DEFINE(INET6)
   ipv6=yes,
   
   AC_MSG_RESULT(no)
   ipv6=no,
   
   AC_MSG_RESULT(not for cross compile)
   ipv6=no
)


# see if we have the new-style name resolution calls
#
AC_CHECK_FUNC(getaddrinfo, AC_DEFINE(HAVE_GETADDRINFO),)
AC_CHECK_FUNC(getnameinfo, AC_DEFINE(HAVE_GETNAMEINFO),)


# check for dns resolution library
#
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname, LIBS="$LIBS -lnsl",) )


# check for ip address and numbers lib
#
AC_CHECK_FUNC(inet_aton, , AC_CHECK_LIB(resolv, inet_aton, LIBS="$LIBS -lresolv",) )



# check for non-blocking fd style available..
#
AC_MSG_CHECKING(non-blocking style)
changequote(<<, >>)#
<<
precode='#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/socket.h>
#include <fcntl.h>
#ifdef HAVE_FCNTLBITS_H
# include <fcntlbits.h>
#endif
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>

void
alarmed(int signum)
{
	exit(1);
}

int
main()
{
	char b[12];
	struct sockaddr x;
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && (fcntl(f, F_SETFL,'
postcode=') != -1)) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, &x, &l);
		alarm(0);
		exit(0);
	}
	exit(1);
}'
>>
changequote([, ])

code="$precode O_NONBLOCK $postcode"

AC_TRY_RUN($code,
  AC_DEFINE(NBLOCK_POSIX)
  AC_MSG_RESULT(posix),
  code="$precode O_NDELAY $postcode"
  AC_TRY_RUN($code,
    AC_DEFINE(NBLOCK_BSD)
    AC_MSG_RESULT(bsd),
    code="$precode FIONBIO $postcode"
    AC_TRY_RUN($code,
      AC_DEFINE(NBLOCK_SYSV)
      AC_MSG_RESULT(system v),
      AC_MSG_WARN(i can't find a working non blocking system),
      :),
    :),
  :)


# check for good psuedo-random sources
#
AC_MSG_CHECKING(for /dev/random)
if test -c /dev/random; then
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(HAVE_DEV_RANDOM, 1)
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for /dev/urandom)
if test -c /dev/urandom; then
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(HAVE_DEV_URANDOM, 1)
else
  AC_MSG_RESULT(no)
fi



# ssl checks
saccept=0
sread=0
olibs="$LIBS"
LIBS="$LIBS -lssl -lcrypto"
AC_CHECK_LIB(ssl, SSL_accept, saccept=1,)
AC_CHECK_LIB(ssl, SSL_read, sread=1,)
AC_MSG_CHECKING([whether to enable SSL support])
if test $saccept = 1 -a $sread = 1; then
  AC_DEFINE(HAVE_SSL)
  AC_MSG_RESULT(yes)
  ssl_used="yes"
else
  AC_MSG_RESULT(no)
  LIBS="$olibs"
fi



# check if we should build the shared lib
#
TARGS=static
AC_ARG_ENABLE(shared,
[  --enable-shared            enable building the shared library], TARGS="shared $TARGS", )
AC_SUBST(TARGS)



# subsitute required libraries
#
AC_SUBST(LIBS)


# create Makefile(s)
#
AC_OUTPUT(Makefile libnsock.spec)
