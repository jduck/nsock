#
# don't understand?  http://www.gnu.org/manual/autoconf/
# by: Joshua J. Drake <libnsock@qoop.org>
#
# modifications:
#
# 05/23/2004 - added checks for SSL and libsocket/libnsl
# 
# 09/07/2001 - intial creation, checking for version number, cc, and
#  	       non-blocking

AC_INIT(.version)
AC_CONFIG_HEADER(defs.h)

# grok the version number from .version
#
VERSION=`cat .version`
MAJORVER=`echo $VERSION | cut -d\. -f1`

AC_REVISION($Revision: $VERSION $)

echo "*** configuring libnsock v$VERSION"
echo

AC_SUBST(VERSION)
AC_SUBST(MAJORVER)


# check for debugging setting
#
CFLAGS="-Wall"
LDFLAGS=""
if test "x""$DEBUG" != "x"; then
   CFLAGS="$CFLAGS -ggdb"
else
   CFLAGS="$CFLAGS -O2"
   LDFLAGS="-s"
fi
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)


# check out compiler
#
AC_PROG_CC
AC_PROG_CC_C_O
AC_PROG_CPP
AC_CACHE_SAVE


# check for the socket library
#
AC_CHECK_FUNC(socket, , AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket"))

# check for dns resolution library
#
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname, LIBS="$LIBS -lnsl",) )

# check for ip address and numbers lib
#
AC_CHECK_FUNC(inet_aton, , AC_CHECK_LIB(resolv, inet_aton, LIBS="$LIBS -lresolv",) )


# check for ipv6
#
AC_MSG_CHECKING([for INET6])
AC_TRY_RUN([ /* AF_INET6 available check */
#include <sys/types.h>
#include <sys/socket.h>
int
main()
{
 if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
    return 1;
 else
    return 0;
}],
   AC_MSG_RESULT(yes)	    
   AC_DEFINE(INET6)
   ipv6=yes,
   
   AC_MSG_RESULT(no)
   ipv6=no,
   
   AC_MSG_RESULT(not for cross compile)
   ipv6=no
)


# see if there is an additional library needed for ipv6
#
ipv6type=unknown
ipv6lib=none
ipv6trylibc=no

if test "x$ipv6" = "xyes"; then
   AC_MSG_CHECKING([ipv6 stack type])
   for i in inria kame linux-glibc linux-libinet6 toshiba v6d zeta; do      
      case $i in                
   	inria)                
	   # http://www.kame.net/                        
	   AC_EGREP_CPP(yes, [#                        
#include <netinet/in.h>
#ifdef IPV6_INRIA_VERSION
yes
#endif], [ipv6type=$i; AC_DEFINE(INET6)])
	;;    
	 
	kame)                
	  # http://www.kame.net/                        
	  AC_EGREP_CPP(yes, [#                        
#include <netinet/in.h>
#ifdef __KAME__
yes
#endif], [ipv6type=$i; ipv6lib=inet6; ipv6libdir=/usr/local/v6/lib;
          ipv6trylibc=yes; AC_DEFINE(INET6)])                
	;;
	  
	linux-glibc)                
	   # http://www.v6.linux.or.jp/                        
           AC_EGREP_CPP(yes, [#                        
#include <features.h>
#if defined(__GLIBC__) && __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
yes
#endif], [ipv6type=$i; AC_DEFINE(INET6)])
	;;

	linux-libinet6)                
	   # http://www.v6.linux.or.jp/                        
	   if test -d /usr/inet6 -a -f /usr/include/netinet/ip6.h; then                        
	      ipv6type=$i                                
	      ipv6lib=inet6                                
	      ipv6libdir=/usr/inet6/lib                                
	      ipv6trylibc=yes;                                
	      CFLAGS="-I/usr/inet6/include $CFLAGS"                                
	      AC_DEFINE(INET6)				
	   fi                        
	;;
	
	toshiba)                
	   AC_EGREP_CPP(yes, [#                        
#include <sys/param.h>
#ifdef _TOSHIBA_INET6
yes
#endif], [ipv6type=$i; ipv6lib=inet6; ipv6libdir=/usr/local/v6/lib;
	  AC_DEFINE(INET6)])				
	;;
	
	v6d)                
	   AC_EGREP_CPP(yes, [#                        
#include </usr/local/v6/include/sys/v6config.h>
#ifdef __V6D__
yes
#endif], [ipv6type=$i; ipv6lib=v6; ipv6libdir=/usr/local/v6/lib;
	  CFLAGS="-I/usr/local/v6/include $CFLAGS"])                                
	;;                        
			
	zeta)                
	   AC_EGREP_CPP(yes, [#                        
#include <sys/param.h>
#ifdef _ZETA_MINAMI_INET6
yes
#endif], [ipv6type=$i; ipv6lib=inet6; ipv6libdir=/usr/local/v6/lib;
	  AC_DEFINE(INET6)])
	;;
      esac	
      if test "x$ipv6type" != "xunknown"; then                
         break                        
      fi                
   done        
   AC_MSG_RESULT($ipv6type)
fi
  
if test "x$ipv6" = "xyes" -a "x$ipv6lib" != "xnone"; then
   if test -d "$ipv6libdir" -a -f "$ipv6libdir/lib$ipv6lib.a"; then        
      LIBS="$LIBS -L$ipv6libdir -l$ipv6lib"                
      AC_MSG_RESULT(You have $ipv6lib library, using it)                
   else
      if test "x$ipv6trylibc" = "xyes"; then                
         AC_MSG_RESULT([You do not have (need) $ipv6lib library, using libc])                     
      else                
         AC_MSG_ERROR(Fatal: no $ipv6lib library found.  cannot continue.                        
You need to fetch lib$ipv6lib.a from appropriate
ipv6 kit and compile beforehand.)
      fi                
   fi
fi



# check for non-blocking fd style available..
#
AC_MSG_CHECKING(non-blocking style)
changequote(<<, >>)#
<<
precode='#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/socket.h>
#include <fcntl.h>
#ifdef HAVE_FCNTLBITS_H
# include <fcntlbits.h>
#endif
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>

void
alarmed(int signum)
{
	exit(1);
}

int
main()
{
	char b[12];
	struct sockaddr x;
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && (fcntl(f, F_SETFL,'
postcode=') != -1)) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, &x, &l);
		alarm(0);
		exit(0);
	}
	exit(1);
}'
>>
changequote([, ])

code="$precode O_NONBLOCK $postcode"

AC_TRY_RUN($code,
  AC_DEFINE(NBLOCK_POSIX)
  AC_MSG_RESULT(posix),
  code="$precode O_NDELAY $postcode"
  AC_TRY_RUN($code,
    AC_DEFINE(NBLOCK_BSD)
    AC_MSG_RESULT(bsd),
    code="$precode FIONBIO $postcode"
    AC_TRY_RUN($code,
      AC_DEFINE(NBLOCK_SYSV)
      AC_MSG_RESULT(system v),
      AC_MSG_WARN(i can't find a working non blocking system),
      :),
    :),
  :)


# check for good psuedo-random sources
#
AC_MSG_CHECKING(for /dev/random)
if test -c /dev/random; then
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(HAVE_DEV_RANDOM, 1)
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for /dev/urandom)
if test -c /dev/urandom; then
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(HAVE_DEV_URANDOM, 1)
else
  AC_MSG_RESULT(no)
fi



# ssl checks
saccept=0
sread=0
olibs="$LIBS"
LIBS="$LIBS -lssl -lcrypto"
AC_CHECK_LIB(ssl, SSL_accept, saccept=1,)
AC_CHECK_LIB(ssl, SSL_read, sread=1,)
AC_MSG_CHECKING([whether to enable SSL support])
if test $saccept = 1 -a $sread = 1; then
  AC_DEFINE(HAVE_SSL)
  AC_MSG_RESULT(yes)
  ssl_used="yes"
else
  AC_MSG_RESULT(no)
  LIBS="$olibs"
fi



# check if we should build the shared lib
#
TARGS=static
AC_ARG_ENABLE(shared,
[  --enable-shared            enable building the shared library], TARGS="shared $TARGS", )
AC_SUBST(TARGS)



# subsitute required libraries
#
AC_SUBST(LIBS)


# create Makefile(s)
#
AC_OUTPUT(Makefile libnsock.spec)
